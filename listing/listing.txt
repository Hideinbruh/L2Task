1. Что выведет программа? Объяснить вывод программы.
package main
import (
"fmt"
)
    func main() {
    a := [5]int{76, 77, 78, 79, 80}
    var b []int = a[1:4]
    fmt.Println(b)
}

Ответ: [77 78 79] - потому что отсчет индексов начинается с 0, где число до : включено и число после : исключается.


2. Что выведет программа? Объяснить вывод программы.
package main
import (
"fmt"
)
    func test() (x int) {
        defer func() {
        x++
    }()
        x = 1
        return
}
    func anotherTest() int {
        var x int
        defer func() {
        x++
    }()
        x = 1
        return x
}
    func main() {
        fmt.Println(test())
        fmt.Println(anotherTest())
}

Ответ: 2 1 - потому что в первом случае возвращаемая переменная определена, она изменится в defer и возвращаемая
именованная переменная получит значение 2, во втором случае возвращаемая переменная определена в return, её
инкрементация определяется после return


3. Что выведет программа? Объяснить вывод программы. Объяснить внутреннее
устройство интерфейсов и их отличие от пустых интерфейсов.
package main
import (
"fmt"
"os"
)
    func Foo() error {
        var err *os.PathError = nil
        return err
}
    func main() {
        err := Foo()
        fmt.Println(err)
        fmt.Println(err == nil)
}

Ответ: nil false - Потому что интерфейс будет nil, если оба его поля пустые. В этом примере поля интерфейса nil,
*osPathError. Если бы оба поля были nil, то интерфейс был бы равен nil.

Интерфейс это структура, состоящая из двух полей:

    type iface struct {
         tab  *itab
         data unsafe.Pointer
     }

где tab — это указатель на Interface Table или itable — структуру, которая хранит некоторые метаданные о типе и
список методов, используемых для удовлетворения интерфейса. data — указывает на фактическую переменную, которая
присваивается интерфейсу. Пустой интерфейс не содержит методов, поэтому поля tab *itab для него не просчитывается.


4. Что выведет программа? Объяснить вывод программы.
package main
    func main() {
    ch := make(chan int)
    go func() {
        for i := 0; i < 10; i++ {
            ch <- i
        }
    }()
    for n := range ch {
        println(n)
    }
}

Ответ: deadlock после 10 итераций, т.к. range ch продолжит читать канал, а в него уже никто не напишет, поэтому
в горутине нужно закрыть канал


5. Что выведет программа? Объяснить вывод программы.
package main
    type customError struct {
        msg string
}
    func (e *customError) Error() string {
    return e.msg
}
    func test() *customError {
    {
        // do something
    }
    return nil
}
    func main() {
    var err error
    err = test()
    if err != nil {
        println("error")
        return
    }
    println("ok")
}

Ответ - error - customError удовлетворяет интерфейсу error. При присвоении переменной err значения результата функции
test в поле значения интерфейса будет указатель на nil, но само по себе поле не пустое, поэтому err != nil

6. Что выведет программа? Объяснить вывод программы. Рассказать про
   внутреннее устройство слайсов и что происходит при передаче их в качестве
   аргументов функции.
   package main
   import (
   "fmt"
   )
   func main() {
   var s = []string{"1", "2", "3"}
   modifySlice(s)
   fmt.Println(s)
   }

   func modifySlice(i []string) {
   i[0] = "3"
   i = append(i, "4")
   i[1] = "5"
   i = append(i, "6")
}

Ответ - 3 2 3 - потому что после функции append произойдет переполнение capacity и вернется новый слайс, который
будет указывать уже на новый массив по другому адресу памяти

7. Что выведет программа? Объяснить вывод программы.
   package main
   import (
   "fmt"
   "math/rand"
   "time"
   )
   func asChan(vs ...int) <-chan int {
   c := make(chan int)
   go func() {
   for _, v := range vs {
   c <- v
   time.Sleep(time.Duration(rand.Intn(1000)) *
   time.Millisecond)
   }
   close(c)
   }()
   return c
   }
   func merge(a, b <-chan int) <-chan int {
   c := make(chan int)
   go func() {
   for {
   select {
   case v := <-a:
   c <- v
   case v := <-b:
   c <- v
   }
   }
   }()
   return c
   }
   func main() {
   a := asChan(1, 3, 5, 7)
   b := asChan(2, 4 ,6, 8)
   c := merge(a, b )
   for v := range c {
   fmt.Println(v)
   }
   }

   Ответ: бесконечный цикл после всех итераций, потому что канал открыт, в него никто не пишет. Можно добавить проверку
   ok и закрыть канал, если !ok